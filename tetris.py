# generated by chat gpt on 1/25/25 using the prompt "Create the game tetris in python "

import pygame
import random

# Initialize pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 300
SCREEN_HEIGHT = 600
BLOCK_SIZE = 30

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
CYAN = (0, 255, 255)
MAGENTA = (255, 0, 255)
ORANGE = (255, 165, 0)

# Shapes
SHAPES = [
    [[1, 1, 1, 1]],  # I
    [[1, 1], [1, 1]],  # O
    [[0, 1, 0], [1, 1, 1]],  # T
    [[1, 1, 0], [0, 1, 1]],  # S
    [[0, 1, 1], [1, 1, 0]],  # Z
    [[1, 0, 0], [1, 1, 1]],  # L
    [[0, 0, 1], [1, 1, 1]],  # J
]

SHAPE_COLORS = [CYAN, YELLOW, MAGENTA, GREEN, RED, ORANGE, BLUE]

# Grid setup
grid = [[BLACK for _ in range(SCREEN_WIDTH // BLOCK_SIZE)] for _ in range(SCREEN_HEIGHT // BLOCK_SIZE)]

# Functions
def draw_grid(surface):
    for y, row in enumerate(grid):
        for x, color in enumerate(row):
            pygame.draw.rect(surface, color, (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 0)
            pygame.draw.rect(surface, WHITE, (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 1)

def check_collision(shape, offset):
    off_x, off_y = offset
    for y, row in enumerate(shape):
        for x, cell in enumerate(row):
            if cell:
                new_x, new_y = x + off_x, y + off_y
                if new_x < 0 or new_x >= len(grid[0]) or new_y >= len(grid) or grid[new_y][new_x] != BLACK:
                    return True
    return False

def clear_lines():
    global grid
    grid = [row for row in grid if any(color == BLACK for color in row)]
    while len(grid) < SCREEN_HEIGHT // BLOCK_SIZE:
        grid.insert(0, [BLACK for _ in range(SCREEN_WIDTH // BLOCK_SIZE)])

def rotate_shape(shape):
    return [list(row) for row in zip(*shape[::-1])]

# Tetrimino class
class Tetrimino:
    def __init__(self):
        self.shape = random.choice(SHAPES)
        self.color = SHAPE_COLORS[SHAPES.index(self.shape)]
        self.x = SCREEN_WIDTH // BLOCK_SIZE // 2 - len(self.shape[0]) // 2
        self.y = 0

    def draw(self, surface):
        for y, row in enumerate(self.shape):
            for x, cell in enumerate(row):
                if cell:
                    pygame.draw.rect(surface, self.color, ((self.x + x) * BLOCK_SIZE, (self.y + y) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 0)

    def move(self, dx, dy):
        if not check_collision(self.shape, (self.x + dx, self.y + dy)):
            self.x += dx
            self.y += dy

    def rotate(self):
        rotated_shape = rotate_shape(self.shape)
        if not check_collision(rotated_shape, (self.x, self.y)):
            self.shape = rotated_shape

# Main game loop
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Tetris")
clock = pygame.time.Clock()

current_tetrimino = Tetrimino()
fall_time = 0

running = True
while running:
    screen.fill(BLACK)
    draw_grid(screen)
    current_tetrimino.draw(screen)
    pygame.display.flip()

    fall_time += clock.get_rawtime()
    clock.tick(30)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                current_tetrimino.move(-1, 0)
            if event.key == pygame.K_RIGHT:
                current_tetrimino.move(1, 0)
            if event.key == pygame.K_DOWN:
                current_tetrimino.move(0, 1)
            if event.key == pygame.K_UP:
                current_tetrimino.rotate()

    if fall_time > 500:
        if not check_collision(current_tetrimino.shape, (current_tetrimino.x, current_tetrimino.y + 1)):
            current_tetrimino.y += 1
        else:
            for y, row in enumerate(current_tetrimino.shape):
                for x, cell in enumerate(row):
                    if cell:
                        grid[current_tetrimino.y + y][current_tetrimino.x + x] = current_tetrimino.color
            clear_lines()
            current_tetrimino = Tetrimino()
            if check_collision(current_tetrimino.shape, (current_tetrimino.x, current_tetrimino.y)):
                running = False
        fall_time = 0

pygame.quit()
